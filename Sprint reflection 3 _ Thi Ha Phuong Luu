My team is attempting to develop a Hackloft website and improve the debugging in the code. I tried to test the website many times and accumulated the client’s feedback to update the website's efficiency. In the previous sprint, I built the database, but because I am new to this concept, I could not ensure the accuracy of the code submission of users. I have completed the component details of the database, including its responsibilities, interaction clarity, and class diagram. In addition, I also contributed to my team’s documentation to summarize what my team had done and what jobs we had to do. 
I met many challenges in building the database. The first is data modeling and schema design since poor design can lead to inefficient queries, redundancy, or difficulty scaling the database. With various database systems available, such as MySQL, PostgreSQL, and NoSQL, selecting the wrong type of database can lead to inefficiencies in data handling and querying. That is why I learned to analyze the use case (transaction-heavy, read-heavy, schema flexibility, etc.) before deciding. Scalability is also problematic because Poor scalability planning can result in slow queries, high response times, or even database crashes. Therefore, I focused on vertical and horizontal scaling, sharding, replication, and indexing.
After learning databases, I gained Entity-Relationship (ER) diagrams to visualize data structures and relationships. This helped me structure my thoughts clearly, making mapping real-world concepts into database tables easier. For the Indexing and Query Optimization, I achieved using EXPLAIN statements. I could visualize the query plan, which helped me adjust indexes and queries to maximize performance.
There are many roadblocks that I have to encounter, so in the next sprint, I may improve some parts to manage performance, scalability, and security, like trade-offs between normalization and denormalization, Query optimization and performance tuning, and the ability to choose the right database type (SQL vs. NoSQL).
