I contributed mostly to the frontend development of my code editor project during this sprint, which saw me make great progress. My main contributions were creating a functioning interface with Monaco Editor as the core component, resulting in a versatile and configurable coding experience. I built the editor in React and ensured that it could interface easily with a backend API, enabling users to execute code and view results directly. I also stylized the program, designing a clear structure that divides the code editor, input fields, and output display, allowing users to simply browse and interact with it.
Debugging ESLint problems and cache issues proved to be a significant task. while I attempted to upgrade dependencies, particularly while upgrading to the most recent versions of React and other packages, I noticed recurring permission and compilation issues relating to.eslintcache. I fixed this by changing file permissions and emptying the cache, which helped to restore the application's build functionality. Another challenge was establishing smooth communication between the editor and the backend, particularly with regard to payload formatting and managing asynchronous answers. I handled this by logging detailed error messages, which helped me identify problems in the executeCode method and improve the payload format.
I learnt how to incorporate Monaco Editor into a React app during this sprint, which included handling callbacks like handleEditorDidMount and component states. I also acquired actual experience resolving ESLint problems and troubleshooting node package dependencies, which helped me improve my problem-solving abilities. In addition, I improved my grasp of frontend-backend interaction, especially how to build payloads and manage API answers in a user-friendly manner.
One area that needs work is the modularization of code. I noticed that style and component separation may have been introduced earlier to prevent having too much functionality in a single file (for example, App.js). Going ahead, I want to divide the program into reusable components—such as distinct input, editing, and output display components—early in the development process. I think that improving our code organization from the start will accelerate development and lessen the need for major refactoring in subsequent sprints. Furthermore, increasing documentation and adding error-handling layers for user inputs would help to a more seamless user experience in future editions.
